name: Build EROFS-Utils Native AArch64

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-native-aarch64:
    # Requires self-hosted runner with aarch64 or GitHub's larger runners
    runs-on: 
      - self-hosted
      - ARM64
    # Alternative: runs-on: ubuntu-latest-4-cores-arm
    
    steps:
    - name: Checkout erofs-utils
      uses: actions/checkout@v4
      with:
        repository: erofs/erofs-utils
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          autoconf \
          automake \
          libtool \
          pkg-config \
          git \
          wget \
          zlib1g-dev \
          liblz4-dev \
          liblzma-dev \
          uuid-dev \
          libfuse-dev
        
    - name: Set up build environment
      run: |
        echo "PREFIX=$HOME/erofs-static" >> $GITHUB_ENV
        echo "CFLAGS=-static -O2 -fPIC" >> $GITHUB_ENV
        echo "LDFLAGS=-static" >> $GITHUB_ENV
        mkdir -p $HOME/erofs-static
        
    - name: Build static zlib
      run: |
        cd /tmp
        wget http://zlib.net/zlib-1.3.tar.gz
        tar xzf zlib-1.3.tar.gz
        cd zlib-1.3
        ./configure --prefix=$PREFIX --static
        make -j$(nproc)
        make install
        
    - name: Build static lz4
      run: |
        cd /tmp
        git clone https://github.com/lz4/lz4.git
        cd lz4
        make -j$(nproc) \
          CFLAGS="$CFLAGS" \
          PREFIX=$PREFIX \
          BUILD_STATIC=yes \
          BUILD_SHARED=no
        make install \
          PREFIX=$PREFIX \
          BUILD_STATIC=yes \
          BUILD_SHARED=no
          
    - name: Build static liblzma
      run: |
        cd /tmp
        wget https://github.com/tukaani-project/xz/releases/download/v5.4.4/xz-5.4.4.tar.gz
        tar xzf xz-5.4.4.tar.gz
        cd xz-5.4.4
        ./configure \
          --prefix=$PREFIX \
          --enable-static \
          --disable-shared \
          --disable-xz \
          --disable-xzdec \
          --disable-scripts
        make -j$(nproc)
        make install
        
    - name: Build static libuuid
      run: |
        cd /tmp
        wget https://github.com/util-linux/util-linux/archive/v2.39.2.tar.gz
        tar xzf v2.39.2.tar.gz
        cd util-linux-2.39.2
        ./autogen.sh
        ./configure \
          --prefix=$PREFIX \
          --enable-static \
          --disable-shared \
          --enable-libuuid \
          --disable-all-programs \
          --without-python \
          --without-ncurses
        make -j$(nproc)
        make install
        
    - name: Build erofs-utils
      run: |
        ./autogen.sh
        ./configure \
          --prefix=$PREFIX \
          --enable-static \
          --disable-shared \
          --enable-lz4 \
          --enable-liblzma \
          --with-uuid \
          PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig \
          CFLAGS="$CFLAGS -I$PREFIX/include" \
          LDFLAGS="$LDFLAGS -L$PREFIX/lib" \
          LIBS="-luuid -llz4 -llzma -lz -lpthread"
        make -j$(nproc)
        
    - name: Verify and prepare binaries
      run: |
        echo "=== Verifying static build ==="
        file mkfs/mkfs.erofs
        ldd mkfs/mkfs.erofs || echo "Static binary confirmed"
        
        echo "=== Testing binaries ==="
        ./mkfs/mkfs.erofs --version
        ./dump/dump.erofs --version
        ./fsck/fsck.erofs --version
        
        echo "=== Stripping binaries ==="
        strip mkfs/mkfs.erofs dump/dump.erofs fsck/fsck.erofs
        
        echo "=== Creating output directory ==="
        mkdir -p output
        cp mkfs/mkfs.erofs output/
        cp dump/dump.erofs output/
        cp fsck/fsck.erofs output/
        
        # Create info file
        echo "EROFS-Utils AArch64 Static Binaries" > output/README.txt
        echo "Built on: $(date)" >> output/README.txt
        echo "Target: $(uname -m)" >> output/README.txt
        echo "Compiler: $(gcc --version | head -n1)" >> output/README.txt
        
        ls -la output/
        
    - name: Upload binaries as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: erofs-utils-aarch64-static-native
        path: output/
        retention-days: 30
        
    - name: Create release (on tags)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: output/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
